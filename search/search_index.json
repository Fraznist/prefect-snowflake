{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-snowflake Welcome! Prefect integrations for interacting with prefect-snowflake. Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-snowflake with pip : pip install prefect-snowflake Write and run a flow from prefect import flow from prefect_snowflake import SnowflakeCredentials from prefect_snowflake.database import snowflake_query @flow def snowflake_query_flow (): snowflake_credentials = SnowflakeCredentials ( account = \"account\" , user = \"user\" , password = \"password\" , ) result = snowflake_query ( \"SELECT * FROM table WHERE id=% {id_param} s LIMIT 8;\" , snowflake_credentials , params = { \"id_param\" : 1 } ) return result snowflake_query_flow () Resources If you encounter any bugs while using prefect-snowflake , feel free to open an issue in the prefect-snowflake repository. If you have any questions or issues while using prefect-snowflake , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Development If you'd like to install a version of prefect-snowflake for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-snowflake.git cd prefect-snowflake/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-snowflake","text":"","title":"prefect-snowflake"},{"location":"#welcome","text":"Prefect integrations for interacting with prefect-snowflake.","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-snowflake with pip : pip install prefect-snowflake","title":"Installation"},{"location":"#write-and-run-a-flow","text":"from prefect import flow from prefect_snowflake import SnowflakeCredentials from prefect_snowflake.database import snowflake_query @flow def snowflake_query_flow (): snowflake_credentials = SnowflakeCredentials ( account = \"account\" , user = \"user\" , password = \"password\" , ) result = snowflake_query ( \"SELECT * FROM table WHERE id=% {id_param} s LIMIT 8;\" , snowflake_credentials , params = { \"id_param\" : 1 } ) return result snowflake_query_flow ()","title":"Write and run a flow"},{"location":"#resources","text":"If you encounter any bugs while using prefect-snowflake , feel free to open an issue in the prefect-snowflake repository. If you have any questions or issues while using prefect-snowflake , you can find help in either the Prefect Discourse forum or the Prefect Slack community .","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-snowflake for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-snowflake.git cd prefect-snowflake/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"credentials/","text":"prefect_snowflake.credentials Credentials class to authenticate Snowflake. SnowflakeCredentials Dataclass used to manage authentication with Snowflake. Parameters: Name Type Description Default account The snowflake account name. required user The user name used to authenticate. required password The password used to authenticate. required private_key The PEM used to authenticate. required database The name of the default database to use. required warehouse The name of the default warehouse to use. required authenticator The type of authenticator to use for initializing connection (oauth, externalbrowser, etc); refer to Snowflake documentation for details, and note that externalbrowser will only work in an environment where a browser is available. required token The OAuth or JWT Token to provide when authenticator is set to OAuth. required schema The name of the default schema to use. required role The name of the default role to use. required autocommit Whether to automatically commit. required Source code in prefect_snowflake/credentials.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 class SnowflakeCredentials ( Block ): \"\"\" Dataclass used to manage authentication with Snowflake. Args: account: The snowflake account name. user: The user name used to authenticate. password: The password used to authenticate. private_key: The PEM used to authenticate. database: The name of the default database to use. warehouse: The name of the default warehouse to use. authenticator: The type of authenticator to use for initializing connection (oauth, externalbrowser, etc); refer to [Snowflake documentation](https://docs.snowflake.com/en/user-guide/python-connector-api.html#connect) for details, and note that `externalbrowser` will only work in an environment where a browser is available. token: The OAuth or JWT Token to provide when authenticator is set to OAuth. schema: The name of the default schema to use. role: The name of the default role to use. autocommit: Whether to automatically commit. \"\"\" # noqa account : str user : str password : Optional [ SecretStr ] = None database : Optional [ str ] = None warehouse : Optional [ str ] = None private_key : Optional [ SecretBytes ] = None authenticator : Optional [ str ] = None token : Optional [ SecretStr ] = None schema_ : Optional [ str ] = Field ( alias = \"schema\" ) role : Optional [ str ] = None autocommit : Optional [ bool ] = None def block_initialization ( self ): \"\"\" Filter out unset values. \"\"\" connect_params = { \"account\" : self . account , \"user\" : self . user , \"password\" : self . password , \"database\" : self . database , \"warehouse\" : self . warehouse , \"private_key\" : self . private_key , \"authenticator\" : self . authenticator , \"token\" : self . token , \"schema\" : self . schema_ , \"role\" : self . role , \"autocommit\" : self . autocommit , # required to track task's usage in the Snowflake Partner Network Portal \"application\" : \"Prefect_Snowflake_Collection\" , } # filter out unset values self . connect_params = { param : value for param , value in connect_params . items () if value is not None } auth_params = ( \"password\" , \"private_key\" , \"authenticator\" , \"token\" ) if not any ( param in self . connect_params for param in auth_params ): raise ValueError ( f \"One of the authentication methods must be used: { auth_params } \" ) def get_connection ( self , database : Optional [ str ] = None , warehouse : Optional [ str ] = None ) -> connector . SnowflakeConnection : \"\"\" Returns an authenticated connection that can be used to query from Snowflake databases. Args: database: The name of the database to use; overrides the class definition if provided. warehouse: The name of the warehouse to use; overrides the class definition if provided. Returns: The authenticated SnowflakeConnection. Examples: ```python from prefect import flow from prefect_snowflake import SnowflakeCredentials @flow def snowflake_credentials_flow(): snowflake_credentials = SnowflakeCredentials( account=\"account\", user=\"user\", password=\"password\", database=\"database\", warehouse=\"warehouse\", ) return snowflake_credentials snowflake_credentials_flow() ``` \"\"\" # dont contaminate the original definition connect_params = self . connect_params . copy () if database is not None : connect_params [ \"database\" ] = database if warehouse is not None : connect_params [ \"warehouse\" ] = warehouse for param in ( \"database\" , \"warehouse\" ): if param not in connect_params : raise ValueError ( f \"The { param } must be set in either \" f \"SnowflakeCredentials or the task\" ) connection = connector . connect ( ** connect_params ) return connection block_initialization Filter out unset values. Source code in prefect_snowflake/credentials.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 def block_initialization ( self ): \"\"\" Filter out unset values. \"\"\" connect_params = { \"account\" : self . account , \"user\" : self . user , \"password\" : self . password , \"database\" : self . database , \"warehouse\" : self . warehouse , \"private_key\" : self . private_key , \"authenticator\" : self . authenticator , \"token\" : self . token , \"schema\" : self . schema_ , \"role\" : self . role , \"autocommit\" : self . autocommit , # required to track task's usage in the Snowflake Partner Network Portal \"application\" : \"Prefect_Snowflake_Collection\" , } # filter out unset values self . connect_params = { param : value for param , value in connect_params . items () if value is not None } auth_params = ( \"password\" , \"private_key\" , \"authenticator\" , \"token\" ) if not any ( param in self . connect_params for param in auth_params ): raise ValueError ( f \"One of the authentication methods must be used: { auth_params } \" ) get_connection Returns an authenticated connection that can be used to query from Snowflake databases. Parameters: Name Type Description Default database Optional [ str ] The name of the database to use; overrides the class definition if provided. None warehouse Optional [ str ] The name of the warehouse to use; overrides the class definition if provided. None Returns: Type Description connector . SnowflakeConnection The authenticated SnowflakeConnection. Examples: from prefect import flow from prefect_snowflake import SnowflakeCredentials @flow def snowflake_credentials_flow (): snowflake_credentials = SnowflakeCredentials ( account = \"account\" , user = \"user\" , password = \"password\" , database = \"database\" , warehouse = \"warehouse\" , ) return snowflake_credentials snowflake_credentials_flow () Source code in prefect_snowflake/credentials.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 def get_connection ( self , database : Optional [ str ] = None , warehouse : Optional [ str ] = None ) -> connector . SnowflakeConnection : \"\"\" Returns an authenticated connection that can be used to query from Snowflake databases. Args: database: The name of the database to use; overrides the class definition if provided. warehouse: The name of the warehouse to use; overrides the class definition if provided. Returns: The authenticated SnowflakeConnection. Examples: ```python from prefect import flow from prefect_snowflake import SnowflakeCredentials @flow def snowflake_credentials_flow(): snowflake_credentials = SnowflakeCredentials( account=\"account\", user=\"user\", password=\"password\", database=\"database\", warehouse=\"warehouse\", ) return snowflake_credentials snowflake_credentials_flow() ``` \"\"\" # dont contaminate the original definition connect_params = self . connect_params . copy () if database is not None : connect_params [ \"database\" ] = database if warehouse is not None : connect_params [ \"warehouse\" ] = warehouse for param in ( \"database\" , \"warehouse\" ): if param not in connect_params : raise ValueError ( f \"The { param } must be set in either \" f \"SnowflakeCredentials or the task\" ) connection = connector . connect ( ** connect_params ) return connection","title":"Credentials"},{"location":"credentials/#prefect_snowflake.credentials","text":"Credentials class to authenticate Snowflake.","title":"credentials"},{"location":"credentials/#prefect_snowflake.credentials.SnowflakeCredentials","text":"Dataclass used to manage authentication with Snowflake. Parameters: Name Type Description Default account The snowflake account name. required user The user name used to authenticate. required password The password used to authenticate. required private_key The PEM used to authenticate. required database The name of the default database to use. required warehouse The name of the default warehouse to use. required authenticator The type of authenticator to use for initializing connection (oauth, externalbrowser, etc); refer to Snowflake documentation for details, and note that externalbrowser will only work in an environment where a browser is available. required token The OAuth or JWT Token to provide when authenticator is set to OAuth. required schema The name of the default schema to use. required role The name of the default role to use. required autocommit Whether to automatically commit. required Source code in prefect_snowflake/credentials.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 class SnowflakeCredentials ( Block ): \"\"\" Dataclass used to manage authentication with Snowflake. Args: account: The snowflake account name. user: The user name used to authenticate. password: The password used to authenticate. private_key: The PEM used to authenticate. database: The name of the default database to use. warehouse: The name of the default warehouse to use. authenticator: The type of authenticator to use for initializing connection (oauth, externalbrowser, etc); refer to [Snowflake documentation](https://docs.snowflake.com/en/user-guide/python-connector-api.html#connect) for details, and note that `externalbrowser` will only work in an environment where a browser is available. token: The OAuth or JWT Token to provide when authenticator is set to OAuth. schema: The name of the default schema to use. role: The name of the default role to use. autocommit: Whether to automatically commit. \"\"\" # noqa account : str user : str password : Optional [ SecretStr ] = None database : Optional [ str ] = None warehouse : Optional [ str ] = None private_key : Optional [ SecretBytes ] = None authenticator : Optional [ str ] = None token : Optional [ SecretStr ] = None schema_ : Optional [ str ] = Field ( alias = \"schema\" ) role : Optional [ str ] = None autocommit : Optional [ bool ] = None def block_initialization ( self ): \"\"\" Filter out unset values. \"\"\" connect_params = { \"account\" : self . account , \"user\" : self . user , \"password\" : self . password , \"database\" : self . database , \"warehouse\" : self . warehouse , \"private_key\" : self . private_key , \"authenticator\" : self . authenticator , \"token\" : self . token , \"schema\" : self . schema_ , \"role\" : self . role , \"autocommit\" : self . autocommit , # required to track task's usage in the Snowflake Partner Network Portal \"application\" : \"Prefect_Snowflake_Collection\" , } # filter out unset values self . connect_params = { param : value for param , value in connect_params . items () if value is not None } auth_params = ( \"password\" , \"private_key\" , \"authenticator\" , \"token\" ) if not any ( param in self . connect_params for param in auth_params ): raise ValueError ( f \"One of the authentication methods must be used: { auth_params } \" ) def get_connection ( self , database : Optional [ str ] = None , warehouse : Optional [ str ] = None ) -> connector . SnowflakeConnection : \"\"\" Returns an authenticated connection that can be used to query from Snowflake databases. Args: database: The name of the database to use; overrides the class definition if provided. warehouse: The name of the warehouse to use; overrides the class definition if provided. Returns: The authenticated SnowflakeConnection. Examples: ```python from prefect import flow from prefect_snowflake import SnowflakeCredentials @flow def snowflake_credentials_flow(): snowflake_credentials = SnowflakeCredentials( account=\"account\", user=\"user\", password=\"password\", database=\"database\", warehouse=\"warehouse\", ) return snowflake_credentials snowflake_credentials_flow() ``` \"\"\" # dont contaminate the original definition connect_params = self . connect_params . copy () if database is not None : connect_params [ \"database\" ] = database if warehouse is not None : connect_params [ \"warehouse\" ] = warehouse for param in ( \"database\" , \"warehouse\" ): if param not in connect_params : raise ValueError ( f \"The { param } must be set in either \" f \"SnowflakeCredentials or the task\" ) connection = connector . connect ( ** connect_params ) return connection","title":"SnowflakeCredentials"},{"location":"credentials/#prefect_snowflake.credentials.SnowflakeCredentials.block_initialization","text":"Filter out unset values. Source code in prefect_snowflake/credentials.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 def block_initialization ( self ): \"\"\" Filter out unset values. \"\"\" connect_params = { \"account\" : self . account , \"user\" : self . user , \"password\" : self . password , \"database\" : self . database , \"warehouse\" : self . warehouse , \"private_key\" : self . private_key , \"authenticator\" : self . authenticator , \"token\" : self . token , \"schema\" : self . schema_ , \"role\" : self . role , \"autocommit\" : self . autocommit , # required to track task's usage in the Snowflake Partner Network Portal \"application\" : \"Prefect_Snowflake_Collection\" , } # filter out unset values self . connect_params = { param : value for param , value in connect_params . items () if value is not None } auth_params = ( \"password\" , \"private_key\" , \"authenticator\" , \"token\" ) if not any ( param in self . connect_params for param in auth_params ): raise ValueError ( f \"One of the authentication methods must be used: { auth_params } \" )","title":"block_initialization()"},{"location":"credentials/#prefect_snowflake.credentials.SnowflakeCredentials.get_connection","text":"Returns an authenticated connection that can be used to query from Snowflake databases. Parameters: Name Type Description Default database Optional [ str ] The name of the database to use; overrides the class definition if provided. None warehouse Optional [ str ] The name of the warehouse to use; overrides the class definition if provided. None Returns: Type Description connector . SnowflakeConnection The authenticated SnowflakeConnection. Examples: from prefect import flow from prefect_snowflake import SnowflakeCredentials @flow def snowflake_credentials_flow (): snowflake_credentials = SnowflakeCredentials ( account = \"account\" , user = \"user\" , password = \"password\" , database = \"database\" , warehouse = \"warehouse\" , ) return snowflake_credentials snowflake_credentials_flow () Source code in prefect_snowflake/credentials.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 def get_connection ( self , database : Optional [ str ] = None , warehouse : Optional [ str ] = None ) -> connector . SnowflakeConnection : \"\"\" Returns an authenticated connection that can be used to query from Snowflake databases. Args: database: The name of the database to use; overrides the class definition if provided. warehouse: The name of the warehouse to use; overrides the class definition if provided. Returns: The authenticated SnowflakeConnection. Examples: ```python from prefect import flow from prefect_snowflake import SnowflakeCredentials @flow def snowflake_credentials_flow(): snowflake_credentials = SnowflakeCredentials( account=\"account\", user=\"user\", password=\"password\", database=\"database\", warehouse=\"warehouse\", ) return snowflake_credentials snowflake_credentials_flow() ``` \"\"\" # dont contaminate the original definition connect_params = self . connect_params . copy () if database is not None : connect_params [ \"database\" ] = database if warehouse is not None : connect_params [ \"warehouse\" ] = warehouse for param in ( \"database\" , \"warehouse\" ): if param not in connect_params : raise ValueError ( f \"The { param } must be set in either \" f \"SnowflakeCredentials or the task\" ) connection = connector . connect ( ** connect_params ) return connection","title":"get_connection()"},{"location":"database/","text":"prefect_snowflake.database Module for querying against Snowflake database. snowflake_multiquery async Executes multiple queries against a Snowflake database in a shared session. Allows execution in a transaction. Parameters: Name Type Description Default queries List [ str ] The list of queries to execute against the database. required params Union [ Tuple [ Any ], Dict [ str , Any ]] The params to replace the placeholders in the query. None snowflake_credentials 'SnowflakeCredentials' The credentials to use to authenticate. required cursor_type Optional [ SnowflakeCursor ] The type of database cursor to use for the query. SnowflakeCursor database Optional [ str ] The name of the database to use; overrides the credentials definition if provided. None warehouse Optional [ str ] The name of the warehouse to use; overrides the credentials definition if provided. None as_transaction bool If True, queries are executed in a transaction. False return_transaction_control_results bool Determines if the results of queries controlling the transaction (BEGIN/COMMIT) should be returned. False Returns: Type Description List [ List [ Tuple [ Any ]]] List of the outputs of response.fetchall() for each query. Examples: Query Snowflake table with the ID value parameterized. from prefect import flow from prefect_snowflake import SnowflakeCredentials from prefect_snowflake.database import snowflake_multiquery @flow def snowflake_multiquery_flow (): snowflake_credentials = SnowflakeCredentials ( account = \"account\" , user = \"user\" , password = \"password\" , database = \"database\" , warehouse = \"warehouse\" , ) result = snowflake_multiquery ( [ \"SELECT * FROM table WHERE id=% {id_param} s LIMIT 8;\" , \"SELECT 1,2\" ], snowflake_credentials , params = { \"id_param\" : 1 }, as_transaction = True ) return result snowflake_multiquery_flow () Source code in prefect_snowflake/database.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 @task async def snowflake_multiquery ( queries : List [ str ], snowflake_credentials : \"SnowflakeCredentials\" , params : Union [ Tuple [ Any ], Dict [ str , Any ]] = None , cursor_type : Optional [ SnowflakeCursor ] = SnowflakeCursor , database : Optional [ str ] = None , warehouse : Optional [ str ] = None , as_transaction : bool = False , return_transaction_control_results : bool = False , ) -> List [ List [ Tuple [ Any ]]]: \"\"\" Executes multiple queries against a Snowflake database in a shared session. Allows execution in a transaction. Args: queries: The list of queries to execute against the database. params: The params to replace the placeholders in the query. snowflake_credentials: The credentials to use to authenticate. cursor_type: The type of database cursor to use for the query. database: The name of the database to use; overrides the credentials definition if provided. warehouse: The name of the warehouse to use; overrides the credentials definition if provided. as_transaction: If True, queries are executed in a transaction. return_transaction_control_results: Determines if the results of queries controlling the transaction (BEGIN/COMMIT) should be returned. Returns: List of the outputs of `response.fetchall()` for each query. Examples: Query Snowflake table with the ID value parameterized. ```python from prefect import flow from prefect_snowflake import SnowflakeCredentials from prefect_snowflake.database import snowflake_multiquery @flow def snowflake_multiquery_flow(): snowflake_credentials = SnowflakeCredentials( account=\"account\", user=\"user\", password=\"password\", database=\"database\", warehouse=\"warehouse\", ) result = snowflake_multiquery( [\"SELECT * FROM table WHERE id=%{id_param}s LIMIT 8;\", \"SELECT 1,2\"], snowflake_credentials, params={\"id_param\": 1}, as_transaction=True ) return result snowflake_multiquery_flow() ``` \"\"\" connect_params = { \"database\" : database , \"warehouse\" : warehouse } with snowflake_credentials . get_connection ( ** connect_params ) as connection : if as_transaction : queries . insert ( 0 , BEGIN_TRANSACTION_STATEMENT ) queries . append ( END_TRANSACTION_STATEMENT ) with connection . cursor ( cursor_type ) as cursor : results = [] for query in queries : response = cursor . execute_async ( query , params = params ) query_id = response [ \"queryId\" ] while connection . is_still_running ( connection . get_query_status_throw_if_error ( query_id ) ): await asyncio . sleep ( 0.05 ) cursor . get_results_from_sfqid ( query_id ) result = cursor . fetchall () results . append ( result ) # cut off results from BEGIN/COMMIT queries if as_transaction and not return_transaction_control_results : return results [ 1 : - 1 ] else : return results snowflake_query async Executes a query against a Snowflake database. Parameters: Name Type Description Default query str The query to execute against the database. required params Union [ Tuple [ Any ], Dict [ str , Any ]] The params to replace the placeholders in the query. None snowflake_credentials 'SnowflakeCredentials' The credentials to use to authenticate. required cursor_type Optional [ SnowflakeCursor ] The type of database cursor to use for the query. SnowflakeCursor database Optional [ str ] The name of the database to use; overrides the credentials definition if provided. None warehouse Optional [ str ] The name of the warehouse to use; overrides the credentials definition if provided. None Returns: Type Description List [ Tuple [ Any ]] The output of response.fetchall() . Examples: Query Snowflake table with the ID value parameterized. from prefect import flow from prefect_snowflake import SnowflakeCredentials from prefect_snowflake.database import snowflake_query @flow def snowflake_query_flow (): snowflake_credentials = SnowflakeCredentials ( account = \"account\" , user = \"user\" , password = \"password\" , database = \"database\" , warehouse = \"warehouse\" , ) result = snowflake_query ( \"SELECT * FROM table WHERE id=% {id_param} s LIMIT 8;\" , snowflake_credentials , params = { \"id_param\" : 1 } ) return result snowflake_query_flow () Source code in prefect_snowflake/database.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 @task async def snowflake_query ( query : str , snowflake_credentials : \"SnowflakeCredentials\" , params : Union [ Tuple [ Any ], Dict [ str , Any ]] = None , cursor_type : Optional [ SnowflakeCursor ] = SnowflakeCursor , database : Optional [ str ] = None , warehouse : Optional [ str ] = None , ) -> List [ Tuple [ Any ]]: \"\"\" Executes a query against a Snowflake database. Args: query: The query to execute against the database. params: The params to replace the placeholders in the query. snowflake_credentials: The credentials to use to authenticate. cursor_type: The type of database cursor to use for the query. database: The name of the database to use; overrides the credentials definition if provided. warehouse: The name of the warehouse to use; overrides the credentials definition if provided. Returns: The output of `response.fetchall()`. Examples: Query Snowflake table with the ID value parameterized. ```python from prefect import flow from prefect_snowflake import SnowflakeCredentials from prefect_snowflake.database import snowflake_query @flow def snowflake_query_flow(): snowflake_credentials = SnowflakeCredentials( account=\"account\", user=\"user\", password=\"password\", database=\"database\", warehouse=\"warehouse\", ) result = snowflake_query( \"SELECT * FROM table WHERE id=%{id_param}s LIMIT 8;\", snowflake_credentials, params={\"id_param\": 1} ) return result snowflake_query_flow() ``` \"\"\" connect_params = { \"database\" : database , \"warehouse\" : warehouse } # context manager automatically rolls back failed transactions and closes with snowflake_credentials . get_connection ( ** connect_params ) as connection : with connection . cursor ( cursor_type ) as cursor : response = cursor . execute_async ( query , params = params ) query_id = response [ \"queryId\" ] while connection . is_still_running ( connection . get_query_status_throw_if_error ( query_id ) ): await asyncio . sleep ( 0.05 ) cursor . get_results_from_sfqid ( query_id ) result = cursor . fetchall () return result","title":"Database"},{"location":"database/#prefect_snowflake.database","text":"Module for querying against Snowflake database.","title":"database"},{"location":"database/#prefect_snowflake.database.snowflake_multiquery","text":"Executes multiple queries against a Snowflake database in a shared session. Allows execution in a transaction. Parameters: Name Type Description Default queries List [ str ] The list of queries to execute against the database. required params Union [ Tuple [ Any ], Dict [ str , Any ]] The params to replace the placeholders in the query. None snowflake_credentials 'SnowflakeCredentials' The credentials to use to authenticate. required cursor_type Optional [ SnowflakeCursor ] The type of database cursor to use for the query. SnowflakeCursor database Optional [ str ] The name of the database to use; overrides the credentials definition if provided. None warehouse Optional [ str ] The name of the warehouse to use; overrides the credentials definition if provided. None as_transaction bool If True, queries are executed in a transaction. False return_transaction_control_results bool Determines if the results of queries controlling the transaction (BEGIN/COMMIT) should be returned. False Returns: Type Description List [ List [ Tuple [ Any ]]] List of the outputs of response.fetchall() for each query. Examples: Query Snowflake table with the ID value parameterized. from prefect import flow from prefect_snowflake import SnowflakeCredentials from prefect_snowflake.database import snowflake_multiquery @flow def snowflake_multiquery_flow (): snowflake_credentials = SnowflakeCredentials ( account = \"account\" , user = \"user\" , password = \"password\" , database = \"database\" , warehouse = \"warehouse\" , ) result = snowflake_multiquery ( [ \"SELECT * FROM table WHERE id=% {id_param} s LIMIT 8;\" , \"SELECT 1,2\" ], snowflake_credentials , params = { \"id_param\" : 1 }, as_transaction = True ) return result snowflake_multiquery_flow () Source code in prefect_snowflake/database.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 @task async def snowflake_multiquery ( queries : List [ str ], snowflake_credentials : \"SnowflakeCredentials\" , params : Union [ Tuple [ Any ], Dict [ str , Any ]] = None , cursor_type : Optional [ SnowflakeCursor ] = SnowflakeCursor , database : Optional [ str ] = None , warehouse : Optional [ str ] = None , as_transaction : bool = False , return_transaction_control_results : bool = False , ) -> List [ List [ Tuple [ Any ]]]: \"\"\" Executes multiple queries against a Snowflake database in a shared session. Allows execution in a transaction. Args: queries: The list of queries to execute against the database. params: The params to replace the placeholders in the query. snowflake_credentials: The credentials to use to authenticate. cursor_type: The type of database cursor to use for the query. database: The name of the database to use; overrides the credentials definition if provided. warehouse: The name of the warehouse to use; overrides the credentials definition if provided. as_transaction: If True, queries are executed in a transaction. return_transaction_control_results: Determines if the results of queries controlling the transaction (BEGIN/COMMIT) should be returned. Returns: List of the outputs of `response.fetchall()` for each query. Examples: Query Snowflake table with the ID value parameterized. ```python from prefect import flow from prefect_snowflake import SnowflakeCredentials from prefect_snowflake.database import snowflake_multiquery @flow def snowflake_multiquery_flow(): snowflake_credentials = SnowflakeCredentials( account=\"account\", user=\"user\", password=\"password\", database=\"database\", warehouse=\"warehouse\", ) result = snowflake_multiquery( [\"SELECT * FROM table WHERE id=%{id_param}s LIMIT 8;\", \"SELECT 1,2\"], snowflake_credentials, params={\"id_param\": 1}, as_transaction=True ) return result snowflake_multiquery_flow() ``` \"\"\" connect_params = { \"database\" : database , \"warehouse\" : warehouse } with snowflake_credentials . get_connection ( ** connect_params ) as connection : if as_transaction : queries . insert ( 0 , BEGIN_TRANSACTION_STATEMENT ) queries . append ( END_TRANSACTION_STATEMENT ) with connection . cursor ( cursor_type ) as cursor : results = [] for query in queries : response = cursor . execute_async ( query , params = params ) query_id = response [ \"queryId\" ] while connection . is_still_running ( connection . get_query_status_throw_if_error ( query_id ) ): await asyncio . sleep ( 0.05 ) cursor . get_results_from_sfqid ( query_id ) result = cursor . fetchall () results . append ( result ) # cut off results from BEGIN/COMMIT queries if as_transaction and not return_transaction_control_results : return results [ 1 : - 1 ] else : return results","title":"snowflake_multiquery()"},{"location":"database/#prefect_snowflake.database.snowflake_query","text":"Executes a query against a Snowflake database. Parameters: Name Type Description Default query str The query to execute against the database. required params Union [ Tuple [ Any ], Dict [ str , Any ]] The params to replace the placeholders in the query. None snowflake_credentials 'SnowflakeCredentials' The credentials to use to authenticate. required cursor_type Optional [ SnowflakeCursor ] The type of database cursor to use for the query. SnowflakeCursor database Optional [ str ] The name of the database to use; overrides the credentials definition if provided. None warehouse Optional [ str ] The name of the warehouse to use; overrides the credentials definition if provided. None Returns: Type Description List [ Tuple [ Any ]] The output of response.fetchall() . Examples: Query Snowflake table with the ID value parameterized. from prefect import flow from prefect_snowflake import SnowflakeCredentials from prefect_snowflake.database import snowflake_query @flow def snowflake_query_flow (): snowflake_credentials = SnowflakeCredentials ( account = \"account\" , user = \"user\" , password = \"password\" , database = \"database\" , warehouse = \"warehouse\" , ) result = snowflake_query ( \"SELECT * FROM table WHERE id=% {id_param} s LIMIT 8;\" , snowflake_credentials , params = { \"id_param\" : 1 } ) return result snowflake_query_flow () Source code in prefect_snowflake/database.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 @task async def snowflake_query ( query : str , snowflake_credentials : \"SnowflakeCredentials\" , params : Union [ Tuple [ Any ], Dict [ str , Any ]] = None , cursor_type : Optional [ SnowflakeCursor ] = SnowflakeCursor , database : Optional [ str ] = None , warehouse : Optional [ str ] = None , ) -> List [ Tuple [ Any ]]: \"\"\" Executes a query against a Snowflake database. Args: query: The query to execute against the database. params: The params to replace the placeholders in the query. snowflake_credentials: The credentials to use to authenticate. cursor_type: The type of database cursor to use for the query. database: The name of the database to use; overrides the credentials definition if provided. warehouse: The name of the warehouse to use; overrides the credentials definition if provided. Returns: The output of `response.fetchall()`. Examples: Query Snowflake table with the ID value parameterized. ```python from prefect import flow from prefect_snowflake import SnowflakeCredentials from prefect_snowflake.database import snowflake_query @flow def snowflake_query_flow(): snowflake_credentials = SnowflakeCredentials( account=\"account\", user=\"user\", password=\"password\", database=\"database\", warehouse=\"warehouse\", ) result = snowflake_query( \"SELECT * FROM table WHERE id=%{id_param}s LIMIT 8;\", snowflake_credentials, params={\"id_param\": 1} ) return result snowflake_query_flow() ``` \"\"\" connect_params = { \"database\" : database , \"warehouse\" : warehouse } # context manager automatically rolls back failed transactions and closes with snowflake_credentials . get_connection ( ** connect_params ) as connection : with connection . cursor ( cursor_type ) as cursor : response = cursor . execute_async ( query , params = params ) query_id = response [ \"queryId\" ] while connection . is_still_running ( connection . get_query_status_throw_if_error ( query_id ) ): await asyncio . sleep ( 0.05 ) cursor . get_results_from_sfqid ( query_id ) result = cursor . fetchall () return result","title":"snowflake_query()"}]}