{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-snowflake Welcome! Prefect integrations for interacting with prefect-snowflake. Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-snowflake with pip : pip install prefect-snowflake Write and run a flow from prefect import flow from prefect_snowflake.credentials import SnowflakeCredentials from prefect_snowflake.database import SnowflakeConnector , snowflake_query @flow def snowflake_query_flow (): snowflake_credentials = SnowflakeCredentials ( account = \"account\" , user = \"user\" , password = \"password\" , ) snowflake_connector = SnowflakeConnector ( database = \"database\" , warehouse = \"warehouse\" , schema = \"schema\" , credentials = snowflake_credentials ) result = snowflake_query ( \"SELECT * FROM table WHERE id=% {id_param} s LIMIT 8;\" , snowflake_connector , params = { \"id_param\" : 1 } ) return result snowflake_query_flow () Resources If you encounter any bugs while using prefect-snowflake , feel free to open an issue in the prefect-snowflake repository. If you have any questions or issues while using prefect-snowflake , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Development If you'd like to install a version of prefect-snowflake for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-snowflake.git cd prefect-snowflake/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-snowflake","text":"","title":"prefect-snowflake"},{"location":"#welcome","text":"Prefect integrations for interacting with prefect-snowflake.","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-snowflake with pip : pip install prefect-snowflake","title":"Installation"},{"location":"#write-and-run-a-flow","text":"from prefect import flow from prefect_snowflake.credentials import SnowflakeCredentials from prefect_snowflake.database import SnowflakeConnector , snowflake_query @flow def snowflake_query_flow (): snowflake_credentials = SnowflakeCredentials ( account = \"account\" , user = \"user\" , password = \"password\" , ) snowflake_connector = SnowflakeConnector ( database = \"database\" , warehouse = \"warehouse\" , schema = \"schema\" , credentials = snowflake_credentials ) result = snowflake_query ( \"SELECT * FROM table WHERE id=% {id_param} s LIMIT 8;\" , snowflake_connector , params = { \"id_param\" : 1 } ) return result snowflake_query_flow ()","title":"Write and run a flow"},{"location":"#resources","text":"If you encounter any bugs while using prefect-snowflake , feel free to open an issue in the prefect-snowflake repository. If you have any questions or issues while using prefect-snowflake , you can find help in either the Prefect Discourse forum or the Prefect Slack community .","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-snowflake for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-snowflake.git cd prefect-snowflake/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"credentials/","text":"prefect_snowflake.credentials Credentials class to authenticate Snowflake. SnowflakeCredentials Block used to manage authentication with Snowflake. Parameters: Name Type Description Default account str The snowflake account name. required user str The user name used to authenticate. required password SecretStr The password used to authenticate. required private_key SecretStr The PEM used to authenticate. required authenticator str The type of authenticator to use for initializing connection (oauth, externalbrowser, etc); refer to Snowflake documentation for details, and note that externalbrowser will only work in an environment where a browser is available. required token SecretStr The OAuth or JWT Token to provide when authenticator is set to OAuth. required okta_endpoint str The Okta endpoint to use when authenticator is set to okta_endpoint , e.g. https://<okta_account_name>.okta.com . required role str The name of the default role to use. required autocommit bool Whether to automatically commit. required Example Load stored Snowflake credentials: from prefect_snowflake import SnowflakeCredentials snowflake_credentials_block = SnowflakeCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_snowflake/credentials.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 class SnowflakeCredentials ( Block ): \"\"\" Block used to manage authentication with Snowflake. Args: account (str): The snowflake account name. user (str): The user name used to authenticate. password (SecretStr): The password used to authenticate. private_key (SecretStr): The PEM used to authenticate. authenticator (str): The type of authenticator to use for initializing connection (oauth, externalbrowser, etc); refer to [Snowflake documentation](https://docs.snowflake.com/en/user-guide/python-connector-api.html#connect) for details, and note that `externalbrowser` will only work in an environment where a browser is available. token (SecretStr): The OAuth or JWT Token to provide when authenticator is set to OAuth. okta_endpoint (str): The Okta endpoint to use when authenticator is set to `okta_endpoint`, e.g. `https://<okta_account_name>.okta.com`. role (str): The name of the default role to use. autocommit (bool): Whether to automatically commit. Example: Load stored Snowflake credentials: ```python from prefect_snowflake import SnowflakeCredentials snowflake_credentials_block = SnowflakeCredentials.load(\"BLOCK_NAME\") ``` \"\"\" # noqa E501 _block_type_name = \"Snowflake Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/2DxzAeTM9eHLDcRQx1FR34/f858a501cdff918d398b39365ec2150f/snowflake.png?h=250\" # noqa account : str = Field ( ... , description = \"The snowflake account name\" ) user : str = Field ( ... , description = \"The user name used to authenticate\" ) password : Optional [ SecretStr ] = Field ( default = None , description = \"The password used to authenticate\" ) private_key : Optional [ SecretBytes ] = Field ( default = None , description = \"The PEM used to authenticate\" ) authenticator : Literal [ \"snowflake\" , \"externalbrowser\" , \"okta_endpoint\" , \"oauth\" , \"username_password_mfa\" , ] = Field ( # noqa default = \"snowflake\" , description = ( \"The type of authenticator to use for initializing connection\" ), ) token : Optional [ SecretStr ] = Field ( default = None , description = ( \"The OAuth or JWT Token to provide when authenticator is set to `oauth`\" ), ) endpoint : Optional [ str ] = Field ( default = None , description = ( \"The Okta endpoint to use when authenticator is set to `okta_endpoint`\" ), ) role : Optional [ str ] = Field ( default = None , description = \"The name of the default role to use\" ) autocommit : Optional [ bool ] = Field ( default = None , description = \"Whether to automatically commit\" ) @root_validator ( pre = True ) def _validate_auth_kwargs ( cls , values ): \"\"\" Ensure an authorization value has been provided by the user. \"\"\" auth_params = ( \"password\" , \"private_key\" , \"authenticator\" , \"token\" ) if not any ( values . get ( param ) for param in auth_params ): auth_str = \", \" . join ( auth_params ) raise ValueError ( f \"One of the authentication keys must be provided: { auth_str } \\n \" ) return values @root_validator ( pre = True ) def _validate_token_kwargs ( cls , values ): \"\"\" Ensure an authorization value has been provided by the user. \"\"\" authenticator = values . get ( \"authenticator\" ) token = values . get ( \"token\" ) if authenticator == \"oauth\" and not token : raise ValueError ( \"If authenticator is set to `oauth`, `token` must be provided\" ) return values @root_validator ( pre = True ) def _validate_okta_kwargs ( cls , values ): \"\"\" Ensure an authorization value has been provided by the user. \"\"\" authenticator = values . get ( \"authenticator\" ) okta_endpoint = values . get ( \"okta_endpoint\" ) if authenticator == \"okta_endpoint\" and not okta_endpoint : raise ValueError ( \"If authenticator is set to `okta_endpoint`, \" \"`okta_endpoint` must be provided\" ) return values","title":"Credentials"},{"location":"credentials/#prefect_snowflake.credentials","text":"Credentials class to authenticate Snowflake.","title":"credentials"},{"location":"credentials/#prefect_snowflake.credentials.SnowflakeCredentials","text":"Block used to manage authentication with Snowflake. Parameters: Name Type Description Default account str The snowflake account name. required user str The user name used to authenticate. required password SecretStr The password used to authenticate. required private_key SecretStr The PEM used to authenticate. required authenticator str The type of authenticator to use for initializing connection (oauth, externalbrowser, etc); refer to Snowflake documentation for details, and note that externalbrowser will only work in an environment where a browser is available. required token SecretStr The OAuth or JWT Token to provide when authenticator is set to OAuth. required okta_endpoint str The Okta endpoint to use when authenticator is set to okta_endpoint , e.g. https://<okta_account_name>.okta.com . required role str The name of the default role to use. required autocommit bool Whether to automatically commit. required Example Load stored Snowflake credentials: from prefect_snowflake import SnowflakeCredentials snowflake_credentials_block = SnowflakeCredentials . load ( \"BLOCK_NAME\" ) Source code in prefect_snowflake/credentials.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 class SnowflakeCredentials ( Block ): \"\"\" Block used to manage authentication with Snowflake. Args: account (str): The snowflake account name. user (str): The user name used to authenticate. password (SecretStr): The password used to authenticate. private_key (SecretStr): The PEM used to authenticate. authenticator (str): The type of authenticator to use for initializing connection (oauth, externalbrowser, etc); refer to [Snowflake documentation](https://docs.snowflake.com/en/user-guide/python-connector-api.html#connect) for details, and note that `externalbrowser` will only work in an environment where a browser is available. token (SecretStr): The OAuth or JWT Token to provide when authenticator is set to OAuth. okta_endpoint (str): The Okta endpoint to use when authenticator is set to `okta_endpoint`, e.g. `https://<okta_account_name>.okta.com`. role (str): The name of the default role to use. autocommit (bool): Whether to automatically commit. Example: Load stored Snowflake credentials: ```python from prefect_snowflake import SnowflakeCredentials snowflake_credentials_block = SnowflakeCredentials.load(\"BLOCK_NAME\") ``` \"\"\" # noqa E501 _block_type_name = \"Snowflake Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/2DxzAeTM9eHLDcRQx1FR34/f858a501cdff918d398b39365ec2150f/snowflake.png?h=250\" # noqa account : str = Field ( ... , description = \"The snowflake account name\" ) user : str = Field ( ... , description = \"The user name used to authenticate\" ) password : Optional [ SecretStr ] = Field ( default = None , description = \"The password used to authenticate\" ) private_key : Optional [ SecretBytes ] = Field ( default = None , description = \"The PEM used to authenticate\" ) authenticator : Literal [ \"snowflake\" , \"externalbrowser\" , \"okta_endpoint\" , \"oauth\" , \"username_password_mfa\" , ] = Field ( # noqa default = \"snowflake\" , description = ( \"The type of authenticator to use for initializing connection\" ), ) token : Optional [ SecretStr ] = Field ( default = None , description = ( \"The OAuth or JWT Token to provide when authenticator is set to `oauth`\" ), ) endpoint : Optional [ str ] = Field ( default = None , description = ( \"The Okta endpoint to use when authenticator is set to `okta_endpoint`\" ), ) role : Optional [ str ] = Field ( default = None , description = \"The name of the default role to use\" ) autocommit : Optional [ bool ] = Field ( default = None , description = \"Whether to automatically commit\" ) @root_validator ( pre = True ) def _validate_auth_kwargs ( cls , values ): \"\"\" Ensure an authorization value has been provided by the user. \"\"\" auth_params = ( \"password\" , \"private_key\" , \"authenticator\" , \"token\" ) if not any ( values . get ( param ) for param in auth_params ): auth_str = \", \" . join ( auth_params ) raise ValueError ( f \"One of the authentication keys must be provided: { auth_str } \\n \" ) return values @root_validator ( pre = True ) def _validate_token_kwargs ( cls , values ): \"\"\" Ensure an authorization value has been provided by the user. \"\"\" authenticator = values . get ( \"authenticator\" ) token = values . get ( \"token\" ) if authenticator == \"oauth\" and not token : raise ValueError ( \"If authenticator is set to `oauth`, `token` must be provided\" ) return values @root_validator ( pre = True ) def _validate_okta_kwargs ( cls , values ): \"\"\" Ensure an authorization value has been provided by the user. \"\"\" authenticator = values . get ( \"authenticator\" ) okta_endpoint = values . get ( \"okta_endpoint\" ) if authenticator == \"okta_endpoint\" and not okta_endpoint : raise ValueError ( \"If authenticator is set to `okta_endpoint`, \" \"`okta_endpoint` must be provided\" ) return values","title":"SnowflakeCredentials"},{"location":"database/","text":"prefect_snowflake.database Module for querying against Snowflake database. SnowflakeConnector Block used to manage connections with Snowflake. Parameters: Name Type Description Default database str The name of the default database to use. required warehouse str The name of the default warehouse to use. required schema str The name of the default schema to use. required credentials SnowflakeCredentials The credentials to authenticate with Snowflake. required Example Load stored Snowflake connector: from prefect_snowflake.database import SnowflakeConnector snowflake_connector_block = SnowflakeConnector . load ( \"BLOCK_NAME\" ) Source code in prefect_snowflake/database.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 class SnowflakeConnector ( Block ): \"\"\" Block used to manage connections with Snowflake. Args: database (str): The name of the default database to use. warehouse (str): The name of the default warehouse to use. schema (str): The name of the default schema to use. credentials (SnowflakeCredentials): The credentials to authenticate with Snowflake. Example: Load stored Snowflake connector: ```python from prefect_snowflake.database import SnowflakeConnector snowflake_connector_block = SnowflakeConnector.load(\"BLOCK_NAME\") ``` \"\"\" # noqa _block_type_name = \"Snowflake Connector\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/2DxzAeTM9eHLDcRQx1FR34/f858a501cdff918d398b39365ec2150f/snowflake.png?h=250\" # noqa database : str = Field ( ... , descriptions = \"The name of the default database to use\" ) warehouse : str = Field ( ... , description = \"The name of the default warehouse to use\" ) schema_ : str = Field ( alias = \"schema\" , description = \"The name of the default schema to use\" ) credentials : SnowflakeCredentials def _get_connect_params ( self ) -> Dict [ str , str ]: \"\"\" Creates a connect params mapping to pass into get_connection. \"\"\" connect_params = { \"database\" : self . database , \"warehouse\" : self . warehouse , \"schema\" : self . schema_ , # required to track task's usage in the Snowflake Partner Network Portal \"application\" : \"Prefect_Snowflake_Collection\" , ** self . credentials . dict (), } # filter out unset values connect_params = { param : value for param , value in connect_params . items () if value is not None } for param in ( \"password\" , \"private_key\" , \"token\" ): if param in connect_params : connect_params [ param ] = connect_params [ param ] . get_secret_value () # set authenticator to the actual okta_endpoint if connect_params . get ( \"authenticator\" ) == \"okta_endpoint\" : connect_params [ \"authenticator\" ] = connect_params . pop ( \"okta_endpoint\" ) return connect_params def get_connection ( self ) -> snowflake . connector . SnowflakeConnection : \"\"\" Returns an authenticated connection that can be used to query from Snowflake databases. Returns: The authenticated SnowflakeConnection. Examples: ```python from prefect import flow from prefect_snowflake.credentials import SnowflakeCredentials from prefect_snowflake.database import SnowflakeConnector @flow def get_connection_flow(): snowflake_credentials = SnowflakeCredentials( account=\"account\", user=\"user\", password=\"password\", ) snowflake_connector = SnowflakeConnector( database=\"database\", warehouse=\"warehouse\", schema=\"schema\", credentials=snowflake_credentials ) print(snowflake_connector.get_connection()) get_connection_flow() ``` \"\"\" connect_params = self . _get_connect_params () connection = snowflake . connector . connect ( ** connect_params ) return connection get_connection Returns an authenticated connection that can be used to query from Snowflake databases. Returns: Type Description snowflake . connector . SnowflakeConnection The authenticated SnowflakeConnection. Examples: from prefect import flow from prefect_snowflake.credentials import SnowflakeCredentials from prefect_snowflake.database import SnowflakeConnector @flow def get_connection_flow (): snowflake_credentials = SnowflakeCredentials ( account = \"account\" , user = \"user\" , password = \"password\" , ) snowflake_connector = SnowflakeConnector ( database = \"database\" , warehouse = \"warehouse\" , schema = \"schema\" , credentials = snowflake_credentials ) print ( snowflake_connector . get_connection ()) get_connection_flow () Source code in prefect_snowflake/database.py 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 def get_connection ( self ) -> snowflake . connector . SnowflakeConnection : \"\"\" Returns an authenticated connection that can be used to query from Snowflake databases. Returns: The authenticated SnowflakeConnection. Examples: ```python from prefect import flow from prefect_snowflake.credentials import SnowflakeCredentials from prefect_snowflake.database import SnowflakeConnector @flow def get_connection_flow(): snowflake_credentials = SnowflakeCredentials( account=\"account\", user=\"user\", password=\"password\", ) snowflake_connector = SnowflakeConnector( database=\"database\", warehouse=\"warehouse\", schema=\"schema\", credentials=snowflake_credentials ) print(snowflake_connector.get_connection()) get_connection_flow() ``` \"\"\" connect_params = self . _get_connect_params () connection = snowflake . connector . connect ( ** connect_params ) return connection snowflake_multiquery async Executes multiple queries against a Snowflake database in a shared session. Allows execution in a transaction. Parameters: Name Type Description Default queries List [ str ] The list of queries to execute against the database. required params Union [ Tuple [ Any ], Dict [ str , Any ]] The params to replace the placeholders in the query. None snowflake_connector SnowflakeConnector The credentials to use to authenticate. required cursor_type SnowflakeCursor The type of database cursor to use for the query. SnowflakeCursor as_transaction bool If True, queries are executed in a transaction. False return_transaction_control_results bool Determines if the results of queries controlling the transaction (BEGIN/COMMIT) should be returned. False poll_frequency_seconds int Number of seconds to wait in between checks for run completion. 1 Returns: Type Description List [ List [ Tuple [ Any ]]] List of the outputs of response.fetchall() for each query. Examples: Query Snowflake table with the ID value parameterized. from prefect import flow from prefect_snowflake.credentials import SnowflakeCredentials from prefect_snowflake.database import SnowflakeConnector , snowflake_multiquery @flow def snowflake_multiquery_flow (): snowflake_credentials = SnowflakeCredentials ( account = \"account\" , user = \"user\" , password = \"password\" , ) snowflake_connector = SnowflakeConnector ( database = \"database\" , warehouse = \"warehouse\" , schema = \"schema\" , credentials = snowflake_credentials ) result = snowflake_multiquery ( [ \"SELECT * FROM table WHERE id=% {id_param} s LIMIT 8;\" , \"SELECT 1,2\" ], snowflake_connector , params = { \"id_param\" : 1 }, as_transaction = True ) return result snowflake_multiquery_flow () Source code in prefect_snowflake/database.py 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 @task async def snowflake_multiquery ( queries : List [ str ], snowflake_connector : SnowflakeConnector , params : Union [ Tuple [ Any ], Dict [ str , Any ]] = None , cursor_type : SnowflakeCursor = SnowflakeCursor , as_transaction : bool = False , return_transaction_control_results : bool = False , poll_frequency_seconds : int = 1 , ) -> List [ List [ Tuple [ Any ]]]: \"\"\" Executes multiple queries against a Snowflake database in a shared session. Allows execution in a transaction. Args: queries: The list of queries to execute against the database. params: The params to replace the placeholders in the query. snowflake_connector: The credentials to use to authenticate. cursor_type: The type of database cursor to use for the query. as_transaction: If True, queries are executed in a transaction. return_transaction_control_results: Determines if the results of queries controlling the transaction (BEGIN/COMMIT) should be returned. poll_frequency_seconds: Number of seconds to wait in between checks for run completion. Returns: List of the outputs of `response.fetchall()` for each query. Examples: Query Snowflake table with the ID value parameterized. ```python from prefect import flow from prefect_snowflake.credentials import SnowflakeCredentials from prefect_snowflake.database import SnowflakeConnector, snowflake_multiquery @flow def snowflake_multiquery_flow(): snowflake_credentials = SnowflakeCredentials( account=\"account\", user=\"user\", password=\"password\", ) snowflake_connector = SnowflakeConnector( database=\"database\", warehouse=\"warehouse\", schema=\"schema\", credentials=snowflake_credentials ) result = snowflake_multiquery( [\"SELECT * FROM table WHERE id=%{id_param}s LIMIT 8;\", \"SELECT 1,2\"], snowflake_connector, params={\"id_param\": 1}, as_transaction=True ) return result snowflake_multiquery_flow() ``` \"\"\" with snowflake_connector . get_connection () as connection : if as_transaction : queries . insert ( 0 , BEGIN_TRANSACTION_STATEMENT ) queries . append ( END_TRANSACTION_STATEMENT ) with connection . cursor ( cursor_type ) as cursor : results = [] for query in queries : response = cursor . execute_async ( query , params = params ) query_id = response [ \"queryId\" ] while connection . is_still_running ( connection . get_query_status_throw_if_error ( query_id ) ): await asyncio . sleep ( poll_frequency_seconds ) cursor . get_results_from_sfqid ( query_id ) result = cursor . fetchall () results . append ( result ) # cut off results from BEGIN/COMMIT queries if as_transaction and not return_transaction_control_results : return results [ 1 : - 1 ] else : return results snowflake_query async Executes a query against a Snowflake database. Parameters: Name Type Description Default query str The query to execute against the database. required params Union [ Tuple [ Any ], Dict [ str , Any ]] The params to replace the placeholders in the query. None snowflake_connector SnowflakeConnector The credentials to use to authenticate. required cursor_type SnowflakeCursor The type of database cursor to use for the query. SnowflakeCursor poll_frequency_seconds int Number of seconds to wait in between checks for run completion. 1 Returns: Type Description List [ Tuple [ Any ]] The output of response.fetchall() . Examples: Query Snowflake table with the ID value parameterized. from prefect import flow from prefect_snowflake.credentials import SnowflakeCredentials from prefect_snowflake.database import SnowflakeConnector , snowflake_query @flow def snowflake_query_flow (): snowflake_credentials = SnowflakeCredentials ( account = \"account\" , user = \"user\" , password = \"password\" , ) snowflake_connector = SnowflakeConnector ( database = \"database\" , warehouse = \"warehouse\" , schema = \"schema\" , credentials = snowflake_credentials ) result = snowflake_query ( \"SELECT * FROM table WHERE id=% {id_param} s LIMIT 8;\" , snowflake_connector , params = { \"id_param\" : 1 } ) return result snowflake_query_flow () Source code in prefect_snowflake/database.py 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 @task async def snowflake_query ( query : str , snowflake_connector : SnowflakeConnector , params : Union [ Tuple [ Any ], Dict [ str , Any ]] = None , cursor_type : SnowflakeCursor = SnowflakeCursor , poll_frequency_seconds : int = 1 , ) -> List [ Tuple [ Any ]]: \"\"\" Executes a query against a Snowflake database. Args: query: The query to execute against the database. params: The params to replace the placeholders in the query. snowflake_connector: The credentials to use to authenticate. cursor_type: The type of database cursor to use for the query. poll_frequency_seconds: Number of seconds to wait in between checks for run completion. Returns: The output of `response.fetchall()`. Examples: Query Snowflake table with the ID value parameterized. ```python from prefect import flow from prefect_snowflake.credentials import SnowflakeCredentials from prefect_snowflake.database import SnowflakeConnector, snowflake_query @flow def snowflake_query_flow(): snowflake_credentials = SnowflakeCredentials( account=\"account\", user=\"user\", password=\"password\", ) snowflake_connector = SnowflakeConnector( database=\"database\", warehouse=\"warehouse\", schema=\"schema\", credentials=snowflake_credentials ) result = snowflake_query( \"SELECT * FROM table WHERE id=%{id_param}s LIMIT 8;\", snowflake_connector, params={\"id_param\": 1} ) return result snowflake_query_flow() ``` \"\"\" # context manager automatically rolls back failed transactions and closes with snowflake_connector . get_connection () as connection : with connection . cursor ( cursor_type ) as cursor : response = cursor . execute_async ( query , params = params ) query_id = response [ \"queryId\" ] while connection . is_still_running ( connection . get_query_status_throw_if_error ( query_id ) ): await asyncio . sleep ( poll_frequency_seconds ) cursor . get_results_from_sfqid ( query_id ) result = cursor . fetchall () return result","title":"Database"},{"location":"database/#prefect_snowflake.database","text":"Module for querying against Snowflake database.","title":"database"},{"location":"database/#prefect_snowflake.database.SnowflakeConnector","text":"Block used to manage connections with Snowflake. Parameters: Name Type Description Default database str The name of the default database to use. required warehouse str The name of the default warehouse to use. required schema str The name of the default schema to use. required credentials SnowflakeCredentials The credentials to authenticate with Snowflake. required Example Load stored Snowflake connector: from prefect_snowflake.database import SnowflakeConnector snowflake_connector_block = SnowflakeConnector . load ( \"BLOCK_NAME\" ) Source code in prefect_snowflake/database.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 class SnowflakeConnector ( Block ): \"\"\" Block used to manage connections with Snowflake. Args: database (str): The name of the default database to use. warehouse (str): The name of the default warehouse to use. schema (str): The name of the default schema to use. credentials (SnowflakeCredentials): The credentials to authenticate with Snowflake. Example: Load stored Snowflake connector: ```python from prefect_snowflake.database import SnowflakeConnector snowflake_connector_block = SnowflakeConnector.load(\"BLOCK_NAME\") ``` \"\"\" # noqa _block_type_name = \"Snowflake Connector\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/2DxzAeTM9eHLDcRQx1FR34/f858a501cdff918d398b39365ec2150f/snowflake.png?h=250\" # noqa database : str = Field ( ... , descriptions = \"The name of the default database to use\" ) warehouse : str = Field ( ... , description = \"The name of the default warehouse to use\" ) schema_ : str = Field ( alias = \"schema\" , description = \"The name of the default schema to use\" ) credentials : SnowflakeCredentials def _get_connect_params ( self ) -> Dict [ str , str ]: \"\"\" Creates a connect params mapping to pass into get_connection. \"\"\" connect_params = { \"database\" : self . database , \"warehouse\" : self . warehouse , \"schema\" : self . schema_ , # required to track task's usage in the Snowflake Partner Network Portal \"application\" : \"Prefect_Snowflake_Collection\" , ** self . credentials . dict (), } # filter out unset values connect_params = { param : value for param , value in connect_params . items () if value is not None } for param in ( \"password\" , \"private_key\" , \"token\" ): if param in connect_params : connect_params [ param ] = connect_params [ param ] . get_secret_value () # set authenticator to the actual okta_endpoint if connect_params . get ( \"authenticator\" ) == \"okta_endpoint\" : connect_params [ \"authenticator\" ] = connect_params . pop ( \"okta_endpoint\" ) return connect_params def get_connection ( self ) -> snowflake . connector . SnowflakeConnection : \"\"\" Returns an authenticated connection that can be used to query from Snowflake databases. Returns: The authenticated SnowflakeConnection. Examples: ```python from prefect import flow from prefect_snowflake.credentials import SnowflakeCredentials from prefect_snowflake.database import SnowflakeConnector @flow def get_connection_flow(): snowflake_credentials = SnowflakeCredentials( account=\"account\", user=\"user\", password=\"password\", ) snowflake_connector = SnowflakeConnector( database=\"database\", warehouse=\"warehouse\", schema=\"schema\", credentials=snowflake_credentials ) print(snowflake_connector.get_connection()) get_connection_flow() ``` \"\"\" connect_params = self . _get_connect_params () connection = snowflake . connector . connect ( ** connect_params ) return connection","title":"SnowflakeConnector"},{"location":"database/#prefect_snowflake.database.SnowflakeConnector.get_connection","text":"Returns an authenticated connection that can be used to query from Snowflake databases. Returns: Type Description snowflake . connector . SnowflakeConnection The authenticated SnowflakeConnection. Examples: from prefect import flow from prefect_snowflake.credentials import SnowflakeCredentials from prefect_snowflake.database import SnowflakeConnector @flow def get_connection_flow (): snowflake_credentials = SnowflakeCredentials ( account = \"account\" , user = \"user\" , password = \"password\" , ) snowflake_connector = SnowflakeConnector ( database = \"database\" , warehouse = \"warehouse\" , schema = \"schema\" , credentials = snowflake_credentials ) print ( snowflake_connector . get_connection ()) get_connection_flow () Source code in prefect_snowflake/database.py 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 def get_connection ( self ) -> snowflake . connector . SnowflakeConnection : \"\"\" Returns an authenticated connection that can be used to query from Snowflake databases. Returns: The authenticated SnowflakeConnection. Examples: ```python from prefect import flow from prefect_snowflake.credentials import SnowflakeCredentials from prefect_snowflake.database import SnowflakeConnector @flow def get_connection_flow(): snowflake_credentials = SnowflakeCredentials( account=\"account\", user=\"user\", password=\"password\", ) snowflake_connector = SnowflakeConnector( database=\"database\", warehouse=\"warehouse\", schema=\"schema\", credentials=snowflake_credentials ) print(snowflake_connector.get_connection()) get_connection_flow() ``` \"\"\" connect_params = self . _get_connect_params () connection = snowflake . connector . connect ( ** connect_params ) return connection","title":"get_connection()"},{"location":"database/#prefect_snowflake.database.snowflake_multiquery","text":"Executes multiple queries against a Snowflake database in a shared session. Allows execution in a transaction. Parameters: Name Type Description Default queries List [ str ] The list of queries to execute against the database. required params Union [ Tuple [ Any ], Dict [ str , Any ]] The params to replace the placeholders in the query. None snowflake_connector SnowflakeConnector The credentials to use to authenticate. required cursor_type SnowflakeCursor The type of database cursor to use for the query. SnowflakeCursor as_transaction bool If True, queries are executed in a transaction. False return_transaction_control_results bool Determines if the results of queries controlling the transaction (BEGIN/COMMIT) should be returned. False poll_frequency_seconds int Number of seconds to wait in between checks for run completion. 1 Returns: Type Description List [ List [ Tuple [ Any ]]] List of the outputs of response.fetchall() for each query. Examples: Query Snowflake table with the ID value parameterized. from prefect import flow from prefect_snowflake.credentials import SnowflakeCredentials from prefect_snowflake.database import SnowflakeConnector , snowflake_multiquery @flow def snowflake_multiquery_flow (): snowflake_credentials = SnowflakeCredentials ( account = \"account\" , user = \"user\" , password = \"password\" , ) snowflake_connector = SnowflakeConnector ( database = \"database\" , warehouse = \"warehouse\" , schema = \"schema\" , credentials = snowflake_credentials ) result = snowflake_multiquery ( [ \"SELECT * FROM table WHERE id=% {id_param} s LIMIT 8;\" , \"SELECT 1,2\" ], snowflake_connector , params = { \"id_param\" : 1 }, as_transaction = True ) return result snowflake_multiquery_flow () Source code in prefect_snowflake/database.py 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 @task async def snowflake_multiquery ( queries : List [ str ], snowflake_connector : SnowflakeConnector , params : Union [ Tuple [ Any ], Dict [ str , Any ]] = None , cursor_type : SnowflakeCursor = SnowflakeCursor , as_transaction : bool = False , return_transaction_control_results : bool = False , poll_frequency_seconds : int = 1 , ) -> List [ List [ Tuple [ Any ]]]: \"\"\" Executes multiple queries against a Snowflake database in a shared session. Allows execution in a transaction. Args: queries: The list of queries to execute against the database. params: The params to replace the placeholders in the query. snowflake_connector: The credentials to use to authenticate. cursor_type: The type of database cursor to use for the query. as_transaction: If True, queries are executed in a transaction. return_transaction_control_results: Determines if the results of queries controlling the transaction (BEGIN/COMMIT) should be returned. poll_frequency_seconds: Number of seconds to wait in between checks for run completion. Returns: List of the outputs of `response.fetchall()` for each query. Examples: Query Snowflake table with the ID value parameterized. ```python from prefect import flow from prefect_snowflake.credentials import SnowflakeCredentials from prefect_snowflake.database import SnowflakeConnector, snowflake_multiquery @flow def snowflake_multiquery_flow(): snowflake_credentials = SnowflakeCredentials( account=\"account\", user=\"user\", password=\"password\", ) snowflake_connector = SnowflakeConnector( database=\"database\", warehouse=\"warehouse\", schema=\"schema\", credentials=snowflake_credentials ) result = snowflake_multiquery( [\"SELECT * FROM table WHERE id=%{id_param}s LIMIT 8;\", \"SELECT 1,2\"], snowflake_connector, params={\"id_param\": 1}, as_transaction=True ) return result snowflake_multiquery_flow() ``` \"\"\" with snowflake_connector . get_connection () as connection : if as_transaction : queries . insert ( 0 , BEGIN_TRANSACTION_STATEMENT ) queries . append ( END_TRANSACTION_STATEMENT ) with connection . cursor ( cursor_type ) as cursor : results = [] for query in queries : response = cursor . execute_async ( query , params = params ) query_id = response [ \"queryId\" ] while connection . is_still_running ( connection . get_query_status_throw_if_error ( query_id ) ): await asyncio . sleep ( poll_frequency_seconds ) cursor . get_results_from_sfqid ( query_id ) result = cursor . fetchall () results . append ( result ) # cut off results from BEGIN/COMMIT queries if as_transaction and not return_transaction_control_results : return results [ 1 : - 1 ] else : return results","title":"snowflake_multiquery()"},{"location":"database/#prefect_snowflake.database.snowflake_query","text":"Executes a query against a Snowflake database. Parameters: Name Type Description Default query str The query to execute against the database. required params Union [ Tuple [ Any ], Dict [ str , Any ]] The params to replace the placeholders in the query. None snowflake_connector SnowflakeConnector The credentials to use to authenticate. required cursor_type SnowflakeCursor The type of database cursor to use for the query. SnowflakeCursor poll_frequency_seconds int Number of seconds to wait in between checks for run completion. 1 Returns: Type Description List [ Tuple [ Any ]] The output of response.fetchall() . Examples: Query Snowflake table with the ID value parameterized. from prefect import flow from prefect_snowflake.credentials import SnowflakeCredentials from prefect_snowflake.database import SnowflakeConnector , snowflake_query @flow def snowflake_query_flow (): snowflake_credentials = SnowflakeCredentials ( account = \"account\" , user = \"user\" , password = \"password\" , ) snowflake_connector = SnowflakeConnector ( database = \"database\" , warehouse = \"warehouse\" , schema = \"schema\" , credentials = snowflake_credentials ) result = snowflake_query ( \"SELECT * FROM table WHERE id=% {id_param} s LIMIT 8;\" , snowflake_connector , params = { \"id_param\" : 1 } ) return result snowflake_query_flow () Source code in prefect_snowflake/database.py 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 @task async def snowflake_query ( query : str , snowflake_connector : SnowflakeConnector , params : Union [ Tuple [ Any ], Dict [ str , Any ]] = None , cursor_type : SnowflakeCursor = SnowflakeCursor , poll_frequency_seconds : int = 1 , ) -> List [ Tuple [ Any ]]: \"\"\" Executes a query against a Snowflake database. Args: query: The query to execute against the database. params: The params to replace the placeholders in the query. snowflake_connector: The credentials to use to authenticate. cursor_type: The type of database cursor to use for the query. poll_frequency_seconds: Number of seconds to wait in between checks for run completion. Returns: The output of `response.fetchall()`. Examples: Query Snowflake table with the ID value parameterized. ```python from prefect import flow from prefect_snowflake.credentials import SnowflakeCredentials from prefect_snowflake.database import SnowflakeConnector, snowflake_query @flow def snowflake_query_flow(): snowflake_credentials = SnowflakeCredentials( account=\"account\", user=\"user\", password=\"password\", ) snowflake_connector = SnowflakeConnector( database=\"database\", warehouse=\"warehouse\", schema=\"schema\", credentials=snowflake_credentials ) result = snowflake_query( \"SELECT * FROM table WHERE id=%{id_param}s LIMIT 8;\", snowflake_connector, params={\"id_param\": 1} ) return result snowflake_query_flow() ``` \"\"\" # context manager automatically rolls back failed transactions and closes with snowflake_connector . get_connection () as connection : with connection . cursor ( cursor_type ) as cursor : response = cursor . execute_async ( query , params = params ) query_id = response [ \"queryId\" ] while connection . is_still_running ( connection . get_query_status_throw_if_error ( query_id ) ): await asyncio . sleep ( poll_frequency_seconds ) cursor . get_results_from_sfqid ( query_id ) result = cursor . fetchall () return result","title":"snowflake_query()"}]}